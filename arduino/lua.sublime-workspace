{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"digit",
				"digitalWrite"
			],
			[
				"color",
				"colorIndex"
			],
			[
				"touch",
				"touchReading"
			],
			[
				"rotation",
				"rotationSpeed"
			],
			[
				"ro",
				"rotationSpeed"
			],
			[
				"getNearestLine",
				"getNearestLine()	phaser-setup.js"
			],
			[
				"addPas",
				"addPastPoint()	phaser-setup.js"
			],
			[
				"getNeare",
				"getNearestLine()	phaser-setup.js"
			],
			[
				"getLive",
				"getLivePoints()	phaser-setup.js"
			],
			[
				"tempC",
				"tempCreateRoute〔function〕"
			],
			[
				"getDista",
				"getDistanceFromLine〔function〕"
			],
			[
				"getDis",
				"getDistanceFromLine〔function〕"
			],
			[
				"update",
				"updateCursor"
			],
			[
				"new",
				"newCursor	client.js"
			],
			[
				"skippe",
				"skippedPackets	serial.js"
			],
			[
				"year",
				"yearspacing	index.js"
			],
			[
				"po",
				"positionDown	serial.js"
			],
			[
				"pos",
				"positionUp	serial.js"
			],
			[
				"position",
				"positionDown	serial.js"
			],
			[
				"comm",
				"commonScaling	serial.js"
			],
			[
				"yearC",
				"yearContainer	index.js"
			],
			[
				"Dis",
				"DisplayObjectContainer()	pixi.dev.js"
			],
			[
				"triang",
				"triangleContainer	index.js"
			],
			[
				"tria",
				"triangleContainer	index.js"
			],
			[
				"componentWillM",
				"componentWillMount	Life Cycle Method"
			],
			[
				"getEleme",
				"getElementById('aSome')"
			],
			[
				"ba",
				"backgroundColor	index.htm"
			],
			[
				"getElementsBy",
				"getElementsByClassName('aSome')"
			],
			[
				"repla",
				"replace_links()	index.js"
			],
			[
				"cur",
				"curuser"
			],
			[
				"indicator",
				"indicator-audio"
			],
			[
				"set",
				"setLight"
			],
			[
				"curren",
				"currentTime"
			],
			[
				"curre",
				"currentTime"
			],
			[
				"vi",
				"video_update"
			],
			[
				"p",
				"pause"
			],
			[
				"s_v",
				"s_v1"
			],
			[
				"h1",
				"h_v1"
			],
			[
				"s_v1",
				"s_v1update"
			],
			[
				"clo",
				"closeMail"
			],
			[
				"m_",
				"m_v2update"
			],
			[
				"m",
				"m_b2"
			],
			[
				"bo",
				"border-bottom"
			],
			[
				"im",
				"!important  (value)"
			],
			[
				"padd",
				"padding-right"
			],
			[
				"marg",
				"margin-right"
			],
			[
				"mar",
				"margin-top"
			],
			[
				"background-co",
				"background-color"
			],
			[
				"back",
				"background"
			],
			[
				"text",
				"text-align"
			],
			[
				"z",
				"z-index"
			],
			[
				"f",
				"fixed"
			],
			[
				"bac",
				"background"
			],
			[
				"font",
				"font-size"
			],
			[
				"border-r",
				"border-radius"
			],
			[
				"fon",
				"font-family"
			],
			[
				"out",
				"outExtension"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"te",
				"text-transform"
			],
			[
				"tab",
				"table-cell"
			],
			[
				"floa",
				"float:   (property)"
			],
			[
				"background-col",
				"background-color:   (property)"
			],
			[
				"s",
				"slice  (function)"
			],
			[
				"Str",
				"Str2_kleinb"
			],
			[
				"padding",
				"padding-bottom"
			],
			[
				"remove",
				"removeBg"
			],
			[
				"add",
				"addClass  (function)"
			],
			[
				"text-",
				"text-transform"
			],
			[
				"backg",
				"background-image"
			],
			[
				"backgrou",
				"background-color"
			],
			[
				"inli",
				"inline-block"
			],
			[
				"pso",
				"position"
			],
			[
				"righ",
				"right  (value)"
			],
			[
				"pad",
				"padding"
			],
			[
				"max",
				"max-width:   (property)"
			],
			[
				"list-st",
				"list-style-type"
			],
			[
				"video",
				"videoView"
			],
			[
				"vid",
				"videoView"
			],
			[
				"lr",
				"lr-server"
			],
			[
				"En",
				"Entity"
			],
			[
				"Enti",
				"entities"
			],
			[
				"play",
				"playerCount"
			],
			[
				"pla",
				"playerCount"
			],
			[
				"shoo",
				"shootDelay"
			],
			[
				"tim",
				"timeTillShoot"
			],
			[
				"sou",
				"source"
			],
			[
				"ch",
				"checkCollision"
			],
			[
				"tare",
				"target_"
			],
			[
				"ta",
				"target"
			],
			[
				"y",
				"yAngle_"
			],
			[
				"yA",
				"yAngle"
			],
			[
				"x",
				"xAngle_"
			],
			[
				"whe",
				"where_"
			],
			[
				"frame",
				"framerate	frameRate (set)"
			],
			[
				"load",
				"loadFont"
			],
			[
				"hea",
				"headline"
			],
			[
				"rect",
				"rectMode"
			],
			[
				"rec",
				"rectMode"
			],
			[
				"switch",
				"switched"
			],
			[
				"fra",
				"frames"
			],
			[
				"getRo",
				"getRow"
			],
			[
				"beg",
				"beginShape"
			],
			[
				"stroke",
				"stroke	stroke"
			],
			[
				"getRow",
				"getRowCount"
			],
			[
				"get",
				"getRowCount"
			],
			[
				"cl",
				"clear"
			],
			[
				"margi",
				"margin-left"
			],
			[
				"cou",
				"counter-reset"
			],
			[
				"counter",
				"counter-increment"
			],
			[
				"pdd",
				"padding-top"
			],
			[
				"count",
				"counter-increment"
			],
			[
				"tex",
				"text-align"
			],
			[
				"in",
				"inline-block"
			],
			[
				"ma",
				"margin-left"
			],
			[
				"min",
				"min-width:   (property)"
			],
			[
				"wid",
				"width"
			],
			[
				"github",
				"github"
			],
			[
				"t",
				"tint"
			],
			[
				"split",
				"splitext  (function)"
			],
			[
				"file",
				"filename"
			],
			[
				"tm",
				"temp_dir"
			],
			[
				"err",
				"error_line"
			],
			[
				"draw",
				"drawPolygon"
			],
			[
				"cal",
				"calculateAngle"
			],
			[
				"i",
				"indent_offset"
			],
			[
				"inne",
				"inner_margin"
			],
			[
				"cont",
				"content_margin"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/lua.ino",
			"settings":
			{
				"buffer_size": 1074,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"Com.h\"\n#include <Adafruit_FONA.h>\n\n#define URL \"http://38bab1d1.ngrok.com/data\"\n\n#define FONA_RST 4\n#define FONA_CHARGE 20\n#define FONA_KEY 5\n#define FONA_PS 6\n\nAdafruit_FONA gsm = Adafruit_FONA(FONA_RST);\nuint16_t statuscode;\nint16_t length;\nint8_t gpsFix = 0;\n\nchar PIN[] = {'2','5','4','1'};\n\nCom::Com(HardwareSerial * ser) {\n	serial = ser;\n\n	pinMode(FONA_PS, INPUT);\n	pinMode(FONA_KEY, OUTPUT);\n	pinMode(FONA_CHARGE, INPUT_PULLUP);\n\n	digitalWrite(FONA_KEY, HIGH);\n	position = {0,0,0,0,0,0};\n	charging = false;\n}\n\nvoid Com::begin(int baud) {\n\n	serial->begin(baud);\n	if (!gsm.begin(*serial)) {\n	    Serial.println(F(\"Couldn't find GSM\"));\n	    //while (1);\n	}\n	Serial.println(F(\"FONA is connected\"));\n	Serial.println(\". enabling GPS\");\n	if(!gsm.enableGPS(true)) {\n		Serial.println(\"! failed to turn on GPS\");\n	}\n\n\n}\n\nvoid Com::http_post(char* data) {\n	Serial.println(\"enabling gprs\");\n	Serial.println(\"current state is:\");\n	Serial.write(gsm.GPRSstate());\n	if (!gsm.enableGPRS(true)) {\n		Serial.println(F(\"Failed to turn on\"));\n	}\n	if (!gsm.HTTP_POST_start(URL, F(\"application/json\"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length)) {\n		Serial.println(\"Failed!\");\n  	}\n	while (length > 0) {\n		while (gsm.available()) {\n			char c = gsm.read();\n			Serial.write(c);\n			length--;\n			if (! length) break;\n		}\n	}\n	Serial.println(F(\"\\n****\"));\n	gsm.HTTP_POST_end();\n}\n\nvoid Com::queue(char* data) {\n\n}\n\nvoid Com::unlock() {\n	Serial.println(\". unlocking SIM...\");\n	if(!gsm.unlockSIM(PIN)) {\n		Serial.println(\"... pin failed\");\n	} else {\n		Serial.println(\"... pin ok\");\n		Serial.println(\". enabling network time\");\n		if(!gsm.enableNetworkTimeSync(true)) {\n			Serial.println(\"! failed to enable time sync\");\n		}\n	}\n}\n\nvoid Com::send() {\n\n}\n\nbool Com::connect() {\n	int netState = gsm.getNetworkStatus();\n	if(netState != 1) {\n		Serial.println(\"! GSM not connected\");\n	}\n	if(netState == 0) {\n		unlock();\n		return false;\n	}\n\n	if(gsm.GPRSstate() == 0) {\n		Serial.println(\"! GPRS not attached\");\n		if(!gsm.enableGPRS(true)) {\n			Serial.println(\"! failed to enable GPRS\");\n		}\n	}\n}\n\nvoid Com::checkGPS() {\n	int8_t gpsStatus = gsm.GPSstatus();\n	if(gpsFix != gpsStatus) {\n		Serial.print(\". new GPS state: \");\n		Serial.println(gpsStatus);\n		gpsFix = gpsStatus;\n		//flash;\n	}\n	if(gpsStatus >= 2) {\n		Serial.println(\". updating GPS position...\");\n		if(!gsm.getGPS(&position.lat, &position.lon, &position.speed, &position.heading, &position.altitude)) {\n			Serial.println(\"... failed\");\n		}\n		Serial.print(position.lat);\n		Serial.print(\" - \");\n		Serial.println(position.lon);\n	}\n}\n\nvoid Com::run() {\n	if(networkStatusTimer>5000) {\n		networkStatusTimer = 0;\n		connect();\n		Serial.print(\"Power state: \");\n		Serial.println(digitalRead(FONA_PS));\n\n		Serial.print(\"Charger state: \");\n		Serial.println(analogRead(FONA_CHARGE));\n	}\n\n	if(updatePositionTimer>10000) {\n		updatePositionTimer = 0;\n		checkGPS();\n	}\n\n	if(analogRead(FONA_CHARGE) < 1000) {\n		digitalWrite(13, LOW);\n		charging = false;\n	} else {\n		digitalWrite(13, HIGH);\n		charging = true;\n	}\n}\n\nint Com::getTime\n",
			"file": "src/Com.cpp",
			"file_size": 3054,
			"file_write_time": 130806006760000000,
			"settings":
			{
				"buffer_size": 3072,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Handoff.cpp",
			"settings":
			{
				"buffer_size": 163,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Handoff.h",
			"settings":
			{
				"buffer_size": 235,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Effects.cpp",
			"settings":
			{
				"buffer_size": 8326,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Com.h",
			"settings":
			{
				"buffer_size": 456,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Position.cpp",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Position.h",
			"settings":
			{
				"buffer_size": 188,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Effects.h",
			"settings":
			{
				"buffer_size": 1656,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/dennis/Documents/Arduino/libraries/WireIA/WireIA.h",
			"settings":
			{
				"buffer_size": 3254,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/dennis/Documents/Arduino/libraries/WireIA/WireIA.cpp",
			"settings":
			{
				"buffer_size": 22236,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n#include \"Gprs.h\"\n\n#define URL \"http://71ae2c86.ngrok.com/data\"\n\n#define FONA_RST 4\n\nAdafruit_FONA gsm = Adafruit_FONA(FONA_RST);\nuint16_t statuscode;\nint16_t length;\n\nGprs::Gprs(HardwareSerial * ser) {\n	serial = ser;\n}\n\nvoid Gprs::begin(int baud) {\n	serial->begin(baud);\n	if (!gsm.begin(*serial)) {\n	    Serial.println(F(\"Couldn't find GSM\"));\n	    while (1);\n	}\n	Serial.println(F(\"GSM is OK\"));\n}\n\nvoid Gprs::http_post(char* data) {\n	Serial.println(\"enabling gprs\");\n	Serial.println(\"current state is:\");\n	Serial.write(gsm.GPRSstate());\n	if (!gsm.enableGPRS(true)) {\n		Serial.println(F(\"Failed to turn on\"));\n	}\n	if (!gsm.HTTP_POST_start(URL, F(\"application/json\"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length)) {\n		Serial.println(\"Failed!\");\n  	}\n	while (length > 0) {\n		while (gsm.available()) {\n			char c = gsm.read();\n			Serial.write(c);\n			length--;\n			if (! length) break;\n		}\n	}\n	Serial.println(F(\"\\n****\"));\n	gsm.HTTP_POST_end();\n}\n\nvoid Gprs::queue(char* data) {\n\n}\n\nvoid Gprs::send() {\n\n}\n",
			"file": "src/Gprs.cpp",
			"file_size": 1023,
			"file_write_time": 130799698650000000,
			"settings":
			{
				"buffer_size": 1023,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <Arduino.h>\n\n#ifndef _LUA_GPRS_H\n#define _LUA_GPRS_H\n\nclass Gprs {\n	HardwareSerial * serial;\n\npublic:\n	Gprs(HardwareSerial * ser);\n	void run();\n	void begin(int);\n	void http_post(char* data);\n	void queue(char* data);\n	void send();\n};\n\n#endif\n",
			"file": "src/Gprs.h",
			"file_size": 250,
			"file_write_time": 130789293090000000,
			"settings":
			{
				"buffer_size": 250,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "teensy",
	"build_system_choices":
	[
		[
			[
				[
					"teensy",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"teensy",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Advanced Install Package"
			],
			[
				"disba",
				"Package Control: Disable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"lint",
				"SublimeLinter: Lint This View"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"white",
				"Highlight Whitespaces: Toggle"
			],
			[
				"high",
				"Highlight Whitespaces: Toggle"
			],
			[
				"hi",
				"Highlight Whitespaces: Toggle"
			],
			[
				"en",
				"Package Control: Enable Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"web ins",
				"Set Syntax: Web Inspector (Stack)"
			],
			[
				"web",
				"Web Inspector"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"prett",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"preview",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"markd",
				"Markdown Preview: Github Flavored Markdown: Export HTML in Sublime Text"
			],
			[
				"col",
				"Color picker"
			],
			[
				"colo",
				"Color picker"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"disb",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"Package Control: Disable Package"
			],
			[
				"lis",
				"Package Control: List Packages"
			],
			[
				"",
				"BracketHighlighter: Jump to Left Bracket"
			],
			[
				"lin",
				"SublimeLinter: Next Error"
			],
			[
				"markdow",
				"Markdown Preview: Python Markdown: Copy to Clipboard"
			],
			[
				"mardow",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"markdown",
				"Markdown Preview: Python Markdown: Copy to Clipboard"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"markdo",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"ma",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"mark",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"git d",
				"Git: Diff Current File"
			],
			[
				"git",
				"Git: Toggle Annotations"
			],
			[
				"git ann",
				"Git: Toggle Annotations"
			],
			[
				"sublim",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"sub",
				"SublimeLinter: Show All Errors"
			],
			[
				"ctag",
				"CTags: Show Symbols (all)"
			],
			[
				"cta",
				"CTags: Show Symbols (file)"
			],
			[
				"ct",
				"CTags: Rebuild Tags"
			],
			[
				"reb",
				"CTags: Rebuild Tags"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"buil",
				"Build: Build"
			]
		],
		"width": 601.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"clear()",
			"clear",
			"reload_settings(view)",
			"sublimelinter()",
			"sublimelinter",
			"sublime.platform()",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/dennis/Repositories/mid-ixd3-final/arduino",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/lib",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/lib/808",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/tmp"
	],
	"file_history":
	[
		"/Users/dennis/mid-bob-presentation/com/server.js",
		"/Users/dennis/Repositories/mid-bob-presentation/com/server.js",
		"/Users/dennis/Repositories/mid-ixd3-final/receiver/index.js",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Gps.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/tmp/gprs.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/utils.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/utils.h",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Gps.h",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Effects.cpp",
		"/Users/dennis/Repositories/bob-presentation/com/node_modules/blendmicro/lib/blendmicro.js",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/.pioenvs/autogen_teensy31/src/Effects.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Effects.h",
		"/Users/dennis/Documents/Arduino/libraries/AD5933/AD5933.h",
		"/Users/dennis/Documents/Arduino/libraries/AD5933/AD5933.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/lib/tgps/TinyGPS++.h",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/lib/tgps/TinyGPS++.cpp",
		"/Users/dennis/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/dennis/Documents/Arduino/libraries/AD5933/AD5933.c",
		"/usr/local/lib/python2.7/site-packages/platformio/builder/tools/platformio.py",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/.pioenvs/autogen_teensy31/src/piomain.d",
		"/usr/local/lib/python2.7/site-packages/platformio/boards/teensy.json",
		"/usr/local/lib/python2.7/site-packages/platformio/builder/scripts/teensy.py",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/.pioenvs/autogen_teensy31/src/piomain.cpp",
		"/usr/local/lib/python2.7/site-packages/platformio/builder/scripts/frameworks/arduino.py",
		"/Users/dennis/Sketchbook/inc.h",
		"/Users/dennis/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/include/signal.h",
		"/Users/dennis/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/include/string.h",
		"/Users/dennis/.platformio/packages/framework-arduinoteensy/boards.txt",
		"/Users/dennis/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/lib/armv7e-m/libc_s.a",
		"/Users/dennis/.platformio/packages/toolchain-gccarmnoneeabi/arm-none-eabi/lib/librdpmon.a",
		"/usr/local/lib/python2.7/site-packages/platformio/platforms/teensy.py",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/.pioenvs/autogen_teensy31/src/Queue.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/data.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Location.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Person.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Queue.h",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Queue.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/Location.h",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/gprs.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/led.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/bia.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/touch.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/log.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/event.cpp",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/lua.sublime-project",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/platformio.ini",
		"/Users/dennis/Repositories/mid-ixd3-final/.gitignore",
		"/Users/dennis/.platformio/packages/framework-arduinoteensy/platform.txt",
		"/Users/dennis/.platformio/packages/ldscripts/mk20dx256.ld",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/src/lua.ino",
		"/Applications/Arduino.app/Contents/Java/hardware/teensy/avr/platform.txt",
		"/Users/dennis/Repositories/mid-ixd3-final/arduino/lua/lua.ino",
		"/usr/local/lib/python2.7/site-packages/platformio/util.py",
		"/Users/dennis/.platformio/appstate.json",
		"/Users/dennis/.platformio/packages/ldscripts/linker.cmd",
		"/Users/dennis/Repositories/mid-it/.gitignore",
		"/Users/dennis/Repositories/getrect/package.json",
		"/Users/dennis/.zshrc",
		"/Users/dennis/.zshenv",
		"/Users/dennis/Repositories/getrect/.eslintrc",
		"/Users/dennis/Repositories/getrect/dist/getrect.browser.js",
		"/Users/dennis/Repositories/getrect/readme.md",
		"/Users/dennis/Repositories/getrect/dump.js",
		"/Users/dennis/Repositories/getrect/.jshintrc",
		"/Users/dennis/Repositories/.jshintrc",
		"/Users/dennis/Repositories/getrect/dist/getrekt.browser.js",
		"/Users/dennis/Repositories/getrect/dist/getrekt.es5.js",
		"/Users/dennis/Repositories/gesture-recognizer/dump.js",
		"/Users/dennis/Repositories/gesture-recognizer/dist/getrekt.browser.js",
		"/Users/dennis/Library/Application Support/Sublime Text 3/Packages/DocBlockr/Base File.sublime-settings",
		"/Users/dennis/Repositories/gesture-recognizer/index.js",
		"/Users/dennis/Repositories/gesture-recognizer/package.json",
		"/Users/dennis/Repositories/gesture-recognizer/index.htm",
		"/Users/dennis/Repositories/gesture-recognizer/.gitignore",
		"/Users/dennis/Repositories/gesture-recognizer/dist/.es5.js",
		"/Users/dennis/Repositories/gesture-recognizer/gulpfile.js",
		"/Users/dennis/Repositories/gesture-recognizer/src/index.js",
		"/Users/dennis/Repositories/mid-it/Meilenstein 1/Aufgabe 1-angle/script.js",
		"/Users/dennis/Repositories/mid-it/style.css",
		"/Users/dennis/Repositories/mid-it/script.js",
		"/Users/dennis/Repositories/mid-it/index.htm",
		"/Users/dennis/Dropbox/Mackup/.oh-my-zsh/custom/myconfig.zsh",
		"/Users/dennis/.nvm/nvm.sh",
		"/Users/dennis/Repos/dfs-multitouch/src/js/memory-stats.js",
		"/Users/dennis/Repos/dfs-multitouch/src/data/airports.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/config.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/main.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/phaser-extend.js",
		"/Users/dennis/Repos/nomnom-server/index.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/communication.js",
		"/Users/dennis/Repos/dfs-multitouch/src/left.htm",
		"/Users/dennis/Repos/dfs-multitouch/src/com-server.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/phaser-setup.js",
		"/Users/dennis/Repos/dfs-multitouch/src/main-next.htm",
		"/Users/dennis/Repos/dfs-multitouch/src/main.htm",
		"/Users/dennis/Repos/Tuio.js/examples/index.html",
		"/Users/dennis/Repos/dfs-multitouch/src/js/client.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/components/touch.js",
		"/Users/dennis/Repos/dfs-multitouch/src/css/style.css",
		"/Users/dennis/Downloads/react-0.12.2/examples/basic-jsx-external/index.html",
		"/Users/dennis/Repos/dfs-multitouch/src/right.htm",
		"/Users/dennis/Repos/dfs-multitouch/.gitignore",
		"/Users/dennis/Repos/dfs-multitouch/src/server.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js/client-tuio.js",
		"/Users/dennis/Downloads/react-0.12.2/examples/basic-jsx/index.html",
		"/Users/dennis/Downloads/react-0.12.2/examples/basic-jsx-external/example.js",
		"/Users/dennis/Repos/dfs-multitouch/src/js",
		"/Users/dennis/Repos/mid-imm2-final/interaction/js/config.json",
		"/Users/dennis/Repos/site/.git/config",
		"/Users/dennis/Repos/website/.git/config",
		"/Users/dennis/Repos/mid-imm2-final/interaction/js/serial.js",
		"/Users/dennis/Repos/mid-imm2-final/yearselect/www/js/index.js",
		"/Users/dennis/Repos/mid-imm2-final/projection/js/index.js",
		"/Users/dennis/Repos/mid-imm2-final/yearselect/www/js/index.js.stuff.js",
		"/Users/dennis/Repos/mid-imm2-final/interaction/js/calibrate.js",
		"/Users/dennis/Repos/mid-imm2-final/interaction/js/p3.js",
		"/Users/dennis/Repos/mid-ixd2-final/package.json",
		"/Users/dennis/Repos/mid-ixd2-final/Procfile",
		"/Users/dennis/Repos/mid-imm2-final/yearselect/www/index.htm",
		"/Users/dennis/Repos/mid-imm2-final/yearselect/www/next.htm",
		"/Users/dennis/Repos/nomnom-web/www/next.htm",
		"/Users/dennis/Repos/nomnom-web/index.js",
		"/Users/dennis/Repos/jsmpeg/stream-example.html",
		"/Users/dennis/Playground/pythoncvtraum.py",
		"/Users/dennis/Repos/mid-imm2-final/projection/js/building.js",
		"/Users/dennis/Repos/nomnom-web/style.css",
		"/Users/dennis/Repos/mid-imm2-final/yearselect/www/js/tween.js",
		"/Users/dennis/Repos/mid-imm2-final/interaction/js/configp3.json"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 95.0,
		"where_history":
		[
			"",
			"cap1188",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GPRSSta",
			"OVER",
			"sCom",
			"0x0D",
			");\n",
			"solidR",
			"scale",
			"finish",
			"finis",
			"finished",
			"fade",
			"rotationspeed",
			"durTimer",
			"GPRS",
			"HTTP_POST",
			"updated",
			"isUpd",
			"isUpdated",
			"fps",
			"frame",
			")),",
			" =",
			"console.log",
			"p1",
			"addPastPoint",
			"\"v\"",
			"addPastPoint",
			"getAllPoints",
			"\n    ",
			"100",
			"c",
			"speed",
			"create",
			"time",
			"tab",
			"colli",
			"calculate",
			"graveyard",
			"background",
			"didu",
			"circle",
			"2",
			"paragon",
			"changeYe",
			"changeYea",
			"wmean",
			"50",
			")\n",
			"console.log",
			"BlinkM",
			"public void pushMatrix",
			"canvas",
			"PGraphics g",
			"g =",
			"recorder",
			"public void rect",
			".device-screen",
			".splash .try",
			"splash",
			"192.241.162.150",
			"obj",
			"IMM",
			"number",
			"196mm",
			"invers",
			"tab",
			"232526",
			"time",
			"gmt",
			"readline",
			"DSTM32F103RB",
			"SPARK_CORE",
			"STNUCLEOF401RE",
			"STNUCLEOF401RE=1",
			"CCPREFIX",
			"NUCLEO",
			"nucleo",
			"ccprefix",
			"stm32f4",
			"CCPREFIX",
			"arm",
			"olimexino",
			"8000",
			"serialflash",
			"ifdef ARM",
			"PATH",
			"LIBRARY",
			"26000000UL",
			"esign",
			"width: 100",
			"indicator",
			"outer-audio",
			"audio",
			"outer",
			"transform",
			"t-footer",
			"h2",
			"t-footer",
			".text",
			"h2",
			".text",
			"cap",
			".text",
			"hero",
			"badge",
			"hero",
			"indicator",
			"fig",
			"hero",
			"text",
			"sans",
			"open",
			"volume.handle",
			"volsli",
			"volslider",
			"light.current",
			"setLight",
			"setVideo]",
			"setVideo",
			"2",
			"console",
			"buttons.prev",
			"buttons.next",
			"videos.next",
			"handles.volume",
			"videos.volume",
			"button_next",
			"video_next"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"cap1188",
			"222222",
			"0",
			"263x263",
			"262x262",
			"270x270",
			"250x250",
			"",
			"p",
			",",
			"f",
			",",
			"",
			"Theme - Watson/images",
			"Theme Watson/images",
			"images",
			"Soda Light",
			"Theme - Recreate OSX",
			"_processing_",
			"`",
			"\"",
			"'"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/lua.ino",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1074,
						"regions":
						{
						},
						"selection":
						[
							[
								895,
								895
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Arduino-like IDE/Arduino.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 264.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Com.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3072,
						"regions":
						{
						},
						"selection":
						[
							[
								2831,
								2831
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2508.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Handoff.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 163,
						"regions":
						{
						},
						"selection":
						[
							[
								132,
								132
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Handoff.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 235,
						"regions":
						{
						},
						"selection":
						[
							[
								164,
								164
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Effects.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8326,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Com.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456,
						"regions":
						{
						},
						"selection":
						[
							[
								162,
								162
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Position.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Position.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 188,
						"regions":
						{
						},
						"selection":
						[
							[
								188,
								188
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Effects.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1656,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/dennis/Documents/Arduino/libraries/WireIA/WireIA.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3254,
						"regions":
						{
						},
						"selection":
						[
							[
								253,
								253
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/dennis/Documents/Arduino/libraries/WireIA/WireIA.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22236,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 86.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Gprs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1023,
						"regions":
						{
						},
						"selection":
						[
							[
								118,
								118
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Gprs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 250,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								250
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 344.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "lua.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wat",
				"Watson.sublime-theme"
			],
			[
				"",
				"Watson.sublime-theme"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 173.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
